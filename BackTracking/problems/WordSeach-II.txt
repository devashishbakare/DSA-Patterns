problem link : https://leetcode.com/problems/word-search/

code : 
class Solution {
    public static int dir[] = {1,0,-1,0,1};
    public boolean exist(char[][] board, String word) {
        
        int m = board.length;
        int n = board[0].length;
        boolean vis[][] = new boolean[m][n];
        
        String str = ""+board[0][0];
        if(str.equals(word)) return true;
        
        for(int row = 0; row < m; row++){
            for(int col = 0; col < n; col++){
                
                if(board[row][col] == word.charAt(0)){
                    if(backtrack(row, col, word, 0, vis, board)) return true;
                }
                
            }
        }
        return false;
    }
    
    public boolean backtrack(int row, int col, String word, int ind, boolean vis[][], char board[][]){
        //base case
        if(ind == word.length()) return true;
        int m = board.length;
        int n = board[0].length;
        
        if(board[row][col] != word.charAt(ind) || vis[row][col] == true) return false;
        vis[row][col] = true;
        for(int i = 0; i < 4; i++){
            int newRow = row + dir[i];
            int newCol = col + dir[i+1];
            
            if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n){
                
                if(backtrack(newRow, newCol, word, ind+1, vis, board)==true){
                    return true;
                }   
            }
        }
        vis[row][col] = false;
        return false;
        
    }
    
}