Article : https://www.geeksforgeeks.org/implementing-a-linked-list-in-java-using-class/

Code :

public class LinkedList {

    // head of link list, Note its Node type
	Node head; 

    //creation of Node class
    //Note : next is holding the reference of node type hence Node next
	static class Node {

		int data;
		Node next;

		// Constructor
		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	// **************INSERTION**************

	public static LinkedList insert(LinkedList list, int data)
	{
		
		Node new_node = new Node(data);
		new_node.next = null;

        //head holding the starting point, if its null then no node present, insert here, itself.
		if (list.head == null) {
			list.head = new_node;
		}
		else {
            //get last node
			Node last = list.head;
			while (last.next != null) {
				last = last.next;
			}

			last.next = new_node;
		}

		// Return the list by head
		return list;
	}

	// **************TRAVERSAL**************

	public static void printList(LinkedList list)
	{
		Node currNode = list.head;

		while (currNode != null) {
			System.out.print(currNode.data + " ");
			currNode = currNode.next;
		}
		System.out.println("\n");
	}

	// **************DELETION BY KEY**************

	//deleting by data/key
	public static LinkedList deleteByKey(LinkedList list, int key)
	{
        //to keep the track for previous node so that we have to update the referece
		Node currNode = list.head;
        Node prev = null;

		// CASE 1: first node itself the key/data
		
		if (currNode != null && currNode.data == key) {
			list.head = currNode.next;
			return list;
		}

		
		// CASE 2: If the key is somewhere other than at head
	

		// Search for the key and keep track of the previous node
		while (currNode != null && currNode.data != key) {
			prev = currNode;
			currNode = currNode.next;
		}

        //update the reference
		if (currNode != null) {
			prev.next = currNode.next;
		}

	
		// CASE 3: The key is not present
	
		if (currNode == null) {
            return list
		}

        return list;
	}

	// **************DELETION AT A POSITION**************

	//keeping the track to index by counter++;
	public static LinkedList
	deleteAtPosition(LinkedList list, int index)
	{
		// Store head node
		Node currNode = list.head, prev = null;

		//
		// CASE 1:
		// If index is 0, then head node itself is to be
		// deleted

		if (index == 0 && currNode != null) {
			list.head = currNode.next; // Changed head

			// Display the message
			System.out.println(
				index + " position element deleted");

			// Return the updated List
			return list;
		}

		//
		// CASE 2:
		// If the index is greater than 0 but less than the
		// size of LinkedList
		//
		// The counter
		int counter = 0;

		// Count for the index to be deleted,
		// keep track of the previous node
		// as it is needed to change currNode.next
		while (currNode != null) {

			if (counter == index) {
				// Since the currNode is the required
				// position Unlink currNode from linked list
				prev.next = currNode.next;

				// Display the message
				System.out.println(
					index + " position element deleted");
				break;
			}
			else {
				// If current position is not the index
				// continue to next node
				prev = currNode;
				currNode = currNode.next;
				counter++;
			}
		}

		// If the position element was found, it should be
		// at currNode Therefore the currNode shall not be
		// null
		//
		// CASE 3: The index is greater than the size of the
		// LinkedList
		//
		// In this case, the currNode should be null
		if (currNode == null) {
			// Display the message
			System.out.println(
				index + " position element not found");
		}

		// return the List
		return list;
	}

	// **************MAIN METHOD**************

	// method to create a Singly linked list with n nodes
	public static void main(String[] args)
	{
		/* Start with the empty list. */
		LinkedList list = new LinkedList();

		//
		// ******INSERTION******
		//

		// Insert the values
		list = insert(list, 1);
		list = insert(list, 2);
		list = insert(list, 3);
		list = insert(list, 4);
		list = insert(list, 5);
		list = insert(list, 6);
		list = insert(list, 7);
		list = insert(list, 8);

		// Print the LinkedList
		printList(list);

		//
		// ******DELETION BY KEY******
		//

		// Delete node with value 1
		// In this case the key is ***at head***
		deleteByKey(list, 1);

		// Print the LinkedList
		printList(list);

		// Delete node with value 4
		// In this case the key is present ***in the
		// middle***
		deleteByKey(list, 4);

		// Print the LinkedList
		printList(list);

		// Delete node with value 10
		// In this case the key is ***not present***
		deleteByKey(list, 10);

		// Print the LinkedList
		printList(list);

		//
		// ******DELETION AT POSITION******
		//

		// Delete node at position 0
		// In this case the key is ***at head***
		deleteAtPosition(list, 0);

		// Print the LinkedList
		printList(list);

		// Delete node at position 2
		// In this case the key is present ***in the
		// middle***
		deleteAtPosition(list, 2);

		// Print the LinkedList
		printList(list);

		// Delete node at position 10
		// In this case the key is ***not present***
		deleteAtPosition(list, 10);

		// Print the LinkedList
		printList(list);
	}
}
