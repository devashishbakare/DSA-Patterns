problem link: https://practice.geeksforgeeks.org/problems/da62a798bca208c7a678c133569c3dc7f5b73500/1

code :

Logic : 
1) call for merge for 1, 2
2) merge will return merge list that assign to 2 
3) call for 2, 3 

Easy first approtch:

class GfG
{
    Node flatten(Node root){
	    if(root == null || root.next == null) 
	    return root;
	    
	    Node head = root, nextHead = root.next;
	    
	    while(nextHead != null){
	        Node temp = nextHead.next;
	        
	        head = merge(head, nextHead);
	        nextHead = temp;
	    }
	    head.next = null;
	    return head;
    }
    
    Node merge(Node head1, Node head2){
    
        Node temp = new Node(0);
        Node save = temp;
        
        while(head1 != null && head2 != null){
            
            if(head1.data < head2.data){
                temp.bottom = head1;
                temp = temp.bottom;
                head1 = head1.bottom;
                
            }else{
                temp.bottom = head2;
                temp = temp.bottom;
                head2 = head2.bottom;
            }
        
        }

        if(head1 != null) temp.bottom = head1;
        else temp.bottom = head2;
        
        return save.bottom;
    }
}

Approtch 2 :

class GfG
{
    Node flatten(Node root){
	    if(root == null || root.next == null) 
	    return root;
	    
	    Node head = root, nextHead = root.next;
	    
	    while(nextHead != null){
	        Node temp = nextHead.next;
	        head = merge(head, nextHead);
	        nextHead = temp;
	    }
        //we need to make the final list next as null -> coz there is not need to maintain next address,
	    head.next = null;
	    return head;
    }
    
    Node merge(Node head1, Node head2){
        if(head1 == null) return head2;
        
        if(head2 == null) return head1;
        
        if(head1.data <= head2.data){
            head1.bottom = merge(head1.bottom, head2);
            return head1;
        }
        head2.bottom = merge(head1, head2.bottom);
        return head2;
    }
}




