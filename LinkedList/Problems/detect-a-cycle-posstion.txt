problem link : https://leetcode.com/problems/linked-list-cycle-ii/
we can easily get the ans by using hashset : Naive Solution

code : Naive approtch
 public ListNode detectCycle(ListNode head) {
     
        HashSet<ListNode> set = new HashSet<>();
        
        ListNode start = head;
        
        while(start != null){
            if(set.contains(start)) return start;
            set.add(start);
            start = start.next;
        }
        return null;
}

code : slow and fast pointer approtch

// we will move slow by one and fast by 2, they will collide at, one point
// from that point we have to move our entryPoint(stainding on head) by one and slow by one
// in one point they will meet each other that point is start cycle

public ListNode detectCycle(ListNode head) {
        
        if(head==null || head.next==null || head.next.next==null)  return null;
        
         if(head == head.next.next)
        {
            return head;
        }
        
        ListNode slow = head;
        ListNode fast = head;
        ListNode temp = head;
        
      
        while(fast.next != null && fast.next.next != null)
        {
             slow = slow.next;
             fast = fast.next.next;
            
             if(slow == fast)
             { 
                 while(slow != temp)
                 {
                     slow = slow.next;
                     temp = temp.next;
                 }
                 return temp;
             }
        }
                
       return null;
    }