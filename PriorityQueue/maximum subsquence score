link : https://leetcode.com/problems/maximum-subsequence-score/description/

Note : How we club thme together and then get the maximum one

class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        
        int n = nums1.length;
        int store[][] = new int[n][2];

        for(int i = 0; i < n; i++){
            store[i] = new int[]{nums1[i], nums2[i]};
        }

        Arrays.sort(store, (a, b) -> b[1]-a[1]);
        PriorityQueue<Integer> queue = new PriorityQueue<>(k, (a, b) -> a - b);
        long sum = 0;
        long ans = 0;
        for(int i = 0; i < k; i++){
            sum += store[i][0];
            queue.add(store[i][0]);
        }

        ans = sum * store[k-1][1];

        for(int i = k; i < n; i++){
            sum += store[i][0] - queue.remove();
            queue.add(store[i][0]);
            ans = Math.max(ans, sum * store[i][1]);
        }
        return ans;
    }   
}