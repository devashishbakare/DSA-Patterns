problem link : https://leetcode.com/problems/subarray-sums-divisible-by-k/description/

There are some mathamaticle eqations, you need to focust

1) mathmatical equations
if, s1 is having x reminder of k
if, s2 is having x reminer of k 
then,
	s2-s1 -> divisible by k 

2) mathmatical expression
 
 (pre[i] - pre[j]) % k = 0;
 if, I divide by %k to all the expression
 pre[i] % k = pre[j] % k

solution link : 
https://www.youtube.com/watch?v=QM0klnvTQzk

code:

class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();

        int sum = 0, ans = 0;
        map.put(0, 1);
        for(int num : nums){
            sum += num;
            int rem = sum % k;
            if(rem < 0) rem += k;
            if(map.containsKey(rem)){
                ans += map.get(rem);
                map.put(rem, map.get(rem)+1);
            }else{
                map.put(rem, 1);
            }
        }
        return ans;
    }
}

Brute force : 

class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int count = 0;
        int n = nums.length;
        long sum = 0;
        for(int i = 0; i < n; i++){
            sum = 0;
            for(int j = i; j < n; j++){
                sum += nums[j];
                if(sum % k == 0) count++;
            }
        }
        return count;
    }
}