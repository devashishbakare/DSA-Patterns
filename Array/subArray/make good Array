problem link : https://leetcode.com/contest/weekly-contest-328/problems/count-the-number-of-good-subarrays/

formula -> n * (n - 1)/2 -> used to calculate the pairs (i<j) in array

-It's used to calculate the total number of pairings in a set of n elements, where each element is paired with every other element exactly once.

Eg : arr[ 1, 2, 3, 4] -> Total 6 pair possible 
		(1, 2) (1, 3) (1, 4) -> 3
		(2, 3) (2, 4)        -> 2
		(3, 4)               -> 1

How come this logic use in this problem, Now you have count of same element, you have to
form the how many pair I can make if I have a count

Eg : arr[3, 3, 3] -> (0, 1), (1, 2) -> we need unique pair

-It's used to calculate the number of sub-arrays in an array of size n, as there will be n*(n+1)/2 sub-arrays.


-also calulating for sum of n natural numbers 

code :

class Solution {
    public long countGood(int[] nums, int k) {
        
        //first we need to add elements in map
        //as we go when we see,there is pair/count is 2 then we can increase the pair count
        //while k == pair then we have got the subarray that has the k pair, 
        //all the next pair that we are having they also having at least k pair
        //and we have to move forward with the left
        
        Map<Integer, Integer> map = new HashMap<>();
       
        int left = 0, right = 0;;
        long ans = 0, pair = 0;
        int n = nums.length;
        for(right = 0; right < n; right++){
            int val = nums[right];
            map.put(val, map.getOrDefault(val, 0)+1);

            //fomula to tell we can make this much of pair (n * n-1 /2) if we have n count 
            //if count = 1, pair will form 1 - 1 = 0
            //if count = 2, pair will fomr 2 -1 = 1 -> vali, valj
            //if count = 3, pair will form 3 - 1 = 2 -> (vala, valb), (valb, valc) 

            pair += map.get(val) - 1;
            
            if(pair >= k){
                while(left < right && pair >= k){
                    ans += n - right;
                    //imp :: if I got k pairs in this left-right window then right++ will also bring us new subArray having k pairs
                    //hence no need to calulate get the count only ans += n-right

                    int curr = nums[left];
                    map.put(curr, map.get(curr)-1);
                    pair -= map.get(curr);
                    //if we have 1 count of curr then reduce to 1 and no pair will affect
                    //if we have 3 count of curr then ruduce to 2 and then it will affect 2 pair
                    if(map.get(curr) == 0) map.remove(curr);
                    left++;
                }
            }
        }
        return ans;
        
    }
}