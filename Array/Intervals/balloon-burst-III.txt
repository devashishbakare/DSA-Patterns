problem link : https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/


Logic :
-you need to find out overlap intervals min last point;
minEnd = Math.min(minEnd, point[1]);

-this logic we might used in this problem.
but there are some problem where we need overllap inverval points

below is the template/formula you can think of
    - Merge Two Intervals I1 and I2 :

        startOfMergedInterval = Math.min(start of I1 , start of I2); 
        endOfMergedInterval = Math.max(end of I1 , end of I2l);

    - To find out the intersection of an interval use the following formula

        S1 = max(start of a , start of b)
        S2=min(endofa ,endofb)
        
        if(s1 <= s2) then there is an interval from s1 to s2.

Code :

class Solution {
    public int findMinArrowShots(int[][] points) {
        
        if (points == null || points.length == 0) return 0;
        int count = 0;     
        
        //tracking the inteval min range
        int minEnd = Integer.MAX_VALUE;

        //sort on the basis of start time so that all bollon comes in range to make collection at one place, and then we shoot the arrow
        Arrays.sort(points, (a,b) -> (a[0] - b[0]));   
        
        //keeping first interval, and taking first inteval end to get the range
        //if next interval not in range -> in[0] > minEnd;then we have to shoot arrow
        //why taking min range? : we dont know intevel end is in common range for pre inteval 
        for (int[] in : points) {
          
            if (in[0] > minEnd) {
                count++;
                minEnd = in[1];
            } else {
                minEnd = Math.min(minEnd, in[1]);
            }
        }
        
        return count+1;
        
    }
}