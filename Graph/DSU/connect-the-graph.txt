problem link : https://practice.geeksforgeeks.org/problems/connecting-the-graph/1?

code :

class DSU{
    
    public int parent[];
    public int height[];
    
    public DSU(int n){
        parent = new int[n];
        height = new int[n];
        Arrays.fill(parent, -1);
        Arrays.fill(height, 1);
    }
    
    public int find(int node){
        if(parent[node] == -1) return node;
        
        return parent[node] = find(parent[node]);
    }
    
    public void union(int vertex1, int vertex2){
        
        int node1 = find(vertex1);
        int node2 = find(vertex2);
        
        if(node1 != node2){
            
            if(height[node1] < height[node2]){
                parent[node1] = node2;
                
            }else if(height[node1] > height[node2]){
                parent[node2] = node1;
            }else{
                parent[node2] = node1;
                height[node1]++;
            }
        }
        
        return;
        
    }
}


class Solution {
    
    public int Solve(int n, int[][] edge) {
        
        if(n == 0) return 0;
        
        DSU dsu = new DSU(n);
        int extra = 0;
        for(int e[] : edge){
            if(dsu.find(e[0]) == dsu.find(e[1])) extra++;
            else dsu.union(e[0], e[1]);
            
        }
        int count = 0;
        for(int i = 0; i < n; i++){
            if(dsu.find(i) == i){
                count++;
            }
        }
        int ans = count-1;
        
        if(extra >= ans) return ans;
        return -1;
    }
}
