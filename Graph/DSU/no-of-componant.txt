problem link : https://practice.geeksforgeeks.org/problems/number-of-provinces/1?

this problem also solve using simple dfs
finding connected componant.

class DSU{
    
    public int parent[];
    public int height[];
    
    public DSU(int n){
        parent = new int[n];
        height = new int[n];
        Arrays.fill(parent, -1);
        Arrays.fill(height, 1);
    }
    
    public int find(int node){
        if(parent[node] == -1) return node;
        
        return parent[node] = find(parent[node]);
    }
    
    public void union(int vertex1, int vertex2){
        
        int node1 = find(vertex1);
        int node2 = find(vertex2);
        
        if(node1 != node2){
            
            if(height[node1] < height[node2]){
                parent[node1] = node2;
                
            }else if(height[node1] > height[node2]){
                parent[node2] = node1;
            }else{
                parent[node2] = node1;
                height[node1]++;
            }
        }
        
        return;
        
    }
    
    
}

class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
       
        int size = adj.size();
        if(size == 0 || size == 1) return size;
        
        //ArrayList<ArrayList<Integer>> graph = buildGraph(adj);
        DSU dsu = new DSU(size);
        
        for(int i = 0; i < size; i++){
            ArrayList<Integer> row = adj.get(i);
            for(int j = 0; j < row.size() ; j++){
                if(row.get(j) == 1){
                    dsu.union(i, j);
                }
            }
        }
        
        HashSet<Integer> set = new HashSet<>();
        
        for(int i = 0; i < size; i++){
            set.add(dsu.find(i));
        }
       return set.size();
    }
};