problem link : https://practice.geeksforgeeks.org/problems/number-of-islands/1

Note : this type of problem called as : Online queries.
when comes to input/grid/graph is changeing we tends to think in terms of DSU.

Learning :
we can traverse through the grid/matrix in liniar way 
if you waant to acess matrix[2][1], m = 3; n = 3
Liniar way = row(2) * number of column(n) + col(1) -> 7
fomula -> row * n + col;

we need to create a DSU of M*N length;


class DSU{
    
    public int parent[];
    public int height[];
    
    public DSU(int n ){
        parent = new int[n];
        height = new int[n];
        Arrays.fill(parent, -1);
        Arrays.fill(height, 1);
    }
    
    public int find(int node){
        if(parent[node] == -1){
            return node;
        }
        return parent[node] = find(parent[node]);
    }
    
    public void union(int x, int y){
        int node1 = find(x);
        int node2 = find(y);
        
        if(node1 != node2){
            
            if(height[node1] > height[node2]){
                parent[node2] = node1;
            }else if(height[node1] < height[node2]){
                parent[node1] = node2;
            }else{
                parent[node1] = node2;
                height[node2]++;
            }
        }
        return;
    }
}

class Solution {
    
    public static int dir[] = {1,0,-1,0,1};
   
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        
       boolean vis[][] = new boolean[rows][cols];
       List<Integer> ans = new ArrayList<>();
       int count = 0;
       DSU dsu = new DSU(rows*cols);
       int m = rows;
       int n = cols;
       for(int loc[] : operators){
        
            int row = loc[0];
            int col = loc[1];
            
            if(vis[row][col] == true){
                ans.add(count);
                continue;
            }
            
            vis[row][col] = true;
            count++;
        
            for(int i = 0; i < 4; i++){
                
                int newRow = row + dir[i];
                int newCol = col + dir[i+1];
                
                if(check(newRow, newCol, m, n, vis)){
                    
                    int cellNode = row * n + col;
                    int newCellNode = newRow * n + newCol;
                    
                    if(dsu.find(cellNode) != dsu.find(newCellNode)){
                        dsu.union(cellNode, newCellNode);
                        count--;                
                    }
                }
            }
        
        ans.add(count);
           
       }
        return ans;
        
    }
    
    public boolean check(int row, int col, int m, int n, boolean vis[][]){
     
     if(row >= 0 && row < m && col >= 0 && col < n && vis[row][col] ==true){
         return true;
     }
     return false;
        
    }
}