Amazon favorite question 
exact similar code of previous one 
problem link : https://leetcode.com/problems/rotting-oranges/


    public int orangesRotting(int[][] grid) {

        Queue<int[]> qu = new LinkedList<>();
        int m = grid.length;
        int n = grid[0].length;
        int orangePresent = 0;
        for(int row = 0; row < m; row++){
        for(int col = 0; col < n; col++){
            if(grid[row][col]==2){
                qu.add(new int[]{row, col});
            }
            if(grid[row][col] != 0) orangePresent++;
        }
        }
        int level = 0;
        int dir[] = {1,0,-1,0,1};
        int rottonCount = 0;
        while(qu.size() > 0){
        int size = qu.size();
        rottonCount += size;
        while(size--> 0){
            
            int data[] = qu.remove();
            for(int i = 0; i < 4; i++){
                int row = data[0] + dir[i];
                int col = data[1] + dir[i+1];
                if(row >= 0 && row < m && col >= 0 && col < n && grid[row][col] == 1){
                    grid[row][col] = 2;
                    qu.add(new int[]{row, col});
                }
            }   
        }

        if(qu.size() > 0){
            level++;
        }

        }

        if(rottonCount != orangePresent) return -1;
        return level;

}
