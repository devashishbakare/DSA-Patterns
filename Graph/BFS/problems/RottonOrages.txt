Amazon favorite question 
exact similar code of previous one 
problem link : https://leetcode.com/problems/rotting-oranges/

code :
class Solution {
    
    class Pair{
        int row;
        int col;
        
        public Pair( int row, int col){
            this.row = row;
            this.col = col;
        }
    }
    
    public int orangesRotting(int[][] grid) {
        
        Queue<Pair> qu = new LinkedList<>();
        int dir[][] = {{1, 0}, {-1, 0}, {0, -1}, {0, 1}};
        int rowLength = grid.length;
        int colLength = grid[0].length;
        int total_rottonOranges = 0;
        
        for(int row = 0 ; row < rowLength; row++){
            for( int col = 0 ; col < colLength; col++){
                if(grid[row][col] == 2 ) {
                    qu.add(new Pair(row, col));
                }
                if(grid[row][col] != 0 ){
                    total_rottonOranges++;
                }
            }
        }
        
        int rottonOranges = 0;
        int minute = 0;
        
        while( qu.size() > 0 ) {
        
            int size = qu.size();
            rottonOranges += size;
            
            while(size-- > 0) {
                
                Pair rotton = qu.poll();
                
                for(int side[] : dir){
                    
                    int row = rotton.row + side[0];
                    int col = rotton.col + side[1];
                    
                    if(check(row, col, grid)== true){
                        grid[row][col] = 2;
                        qu.offer(new Pair(row, col));
                    }                    
                    
                }                              
            }

            if(!qu.isEmpty()) minute++;
                        
        }
        
        if(rottonOranges != total_rottonOranges) return -1;
        else return minute;
        
    }
    
    public boolean check(int row, int col, int grid[][] ){
        if( row >= 0 && row < grid.length && col >= 0 && col < grid[0].length && grid[row][col] == 1)
            return true;
        else
            return false;
    }
    
}