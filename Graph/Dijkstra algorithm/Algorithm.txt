problem link : https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=implementing-dijkstra-set-1-adjacency-matrix
Time Complexity : E * log V
code :
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    
    static class Pair implements Comparable<Pair>{
        
        int src;
        int wt;
        
        public Pair(int src, int wt){
            this.src = src;
            this.wt = wt;
        }
        
        public int compareTo(Pair p){
            return this.wt - p.wt;
        }
        
    }
    
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int distance[] = new int[V];
        for(int i = 0 ; i < V; i++)distance[i] = (int)1e8;
        
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(S, 0));
        distance[S] = 0;
        
        while(pq.size() > 0){
            
            Pair node = pq.remove();
            
            int src = node.src;
            int wt = node.wt;
            
            ArrayList<ArrayList<Integer>> graph = adj.get(src);
            
            for(int i = 0; i < graph.size() ; i++){
                
                ArrayList<Integer> list = graph.get(i);
                
                int dest = list.get(0);
                int toReachDestination = list.get(1);
                
                if(wt + toReachDestination < distance[dest]){
                    distance[dest] = wt + toReachDestination;
                    pq.add(new Pair(dest, distance[dest]));
                }
            }
        }
        return distance;
    }
}