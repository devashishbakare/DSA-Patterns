problem link : https://leetcode.com/problems/path-with-minimum-effort/submissions/

why we need to use the dijkstra here?
-as we have to calculate the minimum path from the source to the destination.
-we have to store the maximum efforts of every adjecent cell
-as its not straight forward dijkstra algorithm use, in standered algo we are just storing the shortest cost to reach destination
-here we store the maximum absulute differece, so requirement is same like, we need minimum efforts

class Node implements Comparable<Node>{

    int row;
    int col; 
    int effort;
    
    public Node(int row, int col, int effort){
        this.row = row;
        this.col = col;
        this.effort = effort;
    }
    public int compareTo(Node node){
        return this.effort - node.effort;
    }
    
}

class Solution {
    public int minimumEffortPath(int[][] heights) {
        
        int n = heights.length;
        int m = heights[0].length;
        int dir[] = {1, 0, -1, 0, 1};
        PriorityQueue<Node> pq = new PriorityQueue<>();
        int distance[][] = new int[n][m];
        
        for(int row[] : distance) Arrays.fill(row, (int)1e8);
        
        pq.add(new Node(0, 0, 0));
       
        distance[0][0] = 0;
        
        while(pq.size() > 0 ){
            
            Node node = pq.remove();
            
            int row = node.row;
            int col = node.col;
            int effort = node.effort;
            
            if(row == n-1 && col == m-1) return distance[row][col];
            
            for(int i = 0; i < 4; i++){
                int newRow = row + dir[i];
                int newCol = col + dir[i+1];
                
                if(newRow >= 0 && newCol >= 0 && newRow < n && newCol < m){
                    
                    int currHeight = heights[row][col];
                    int adjHeight = heights[newRow][newCol];
                    int cellEffort = Math.abs(currHeight-adjHeight);
                    int maxEffort = Math.max(cellEffort, effort);
                    
                    if(maxEffort < distance[newRow][newCol]){
                        distance[newRow][newCol] = maxEffort;
                        pq.add(new Node(newRow, newCol, maxEffort));
                    }
                    
                }
            }
          
        }
       return 0;   
    }
}