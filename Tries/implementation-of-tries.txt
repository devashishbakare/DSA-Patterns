problem link :https://leetcode.com/problems/implement-trie-prefix-tree/submissions/

code :

class Node{
    
    Node links[] = new Node[26];
    boolean flag = false;
    
    public boolean containsKey(char ch) {
        return (links[ch - 'a'] != null); 
    }
    
    public Node get(char ch){
        return links[ch-'a'];
    }
    
    public void put(char ch, Node node){
        links[ch-'a'] = node;
    }
    
    public void setEnd(){
        flag = true;
    }
    
    public boolean isEnd(){
        return flag;
    }
}

class Trie {

    private static Node root;
    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) {
        Node node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch)==false){
                node.put(ch, new Node());
            }
            node = node.get(ch);
        }
        node.setEnd();
    }
    
    public boolean search(String word) {
        Node node = root;
        
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch) == false){
                return false;
            }
            node = node.get(ch);
        }
        
        if(node.isEnd()){
            return true;
        }
        return false;
    }
    
    public boolean startsWith(String prefix) {
        
        Node node = root;
        
        for(int i = 0; i < prefix.length(); i++){
            
            char ch = prefix.charAt(i);
            if(node.containsKey(ch) == false){
                return false;
            }
            node = node.get(ch);
        }
        
        return true;
        
    }
}


// this is also a raw way to implement it 

public class Trie {

    public static class TreeNode {
        public TreeNode children[];
        public boolean isEnd;

        public TreeNode(){
            children = new TreeNode[26];
            isEnd = false;
        }
    }


    public static TreeNode root;

    Trie() {
        root = new TreeNode();
    }


    //Inserts a word into the trie

    public static void insert(String word) {
        TreeNode node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            int ind = ch-'a';
            if(node.children[ind] == null){
                node.children[ind] = new TreeNode();
            }
            node = node.children[ind];
        }
        node.isEnd = true;
    }

    public static boolean search(String word) {
        TreeNode node = root;
        for(char ch : word.toCharArray()){
            int ind = ch-'a';
            if(node.children[ind] == null) return false;
            node = node.children[ind];
        }
        return node.isEnd;
    }

    public static boolean startsWith(String prefix) {
        TreeNode node = root;
        for(char ch : prefix.toCharArray()){
            int ind = ch-'a';
            if(node.children[ind] == null) return false;
            node = node.children[ind];
        }
        return true;
    }
}