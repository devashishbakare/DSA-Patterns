problem link : https://www.codingninjas.com/codestudio/problems/implement-trie_1387095

1) insert into tries
2) how many word are present(count);
3) how many prefix are present(count)
4) erase word : but we just --count, no need to node deletion 

Time complexity : 0(N) n -> max length of the word

code : 
class Node{
    
    Node links[] = new Node[26];
    int endCount;
    int prefixCount;
    
    public Node(){
        
    }
    
    public boolean containsKey(char ch){
        return (links[ch-'a'] != null);
    }
    
    public void put(char ch, Node node){
        links[ch-'a'] = node;
    }
    public Node get(char ch){
        return links[ch-'a'];
    }
    public int getEndCount(){
        return endCount;
    }
    
    public int getPrefixCount(){
        return prefixCount;
    }
    
    public void incrementEndCount(){
        endCount++;
    }
    public void decreaseEndCount(){
        endCount--;
    }
    public void incrementPrefixCount(){
        prefixCount++;
    }
    public void decreasePrefixCount(){
        prefixCount--;
    }

    
}
public class Trie {
    private static Node root;
    public Trie() {
        // Write your code here
        root = new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch) == false){
                node.put(ch, new Node());
            }
            node = node.get(ch);
            node.incrementPrefixCount();
        }
        node.incrementEndCount();
    }

    public int countWordsEqualTo(String word) {
        Node node = root;
        
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch)){
                node = node.get(ch);
            }else{
                return 0;
            }
        }
        return node.getEndCount();
    }

    public int countWordsStartingWith(String word) {
       Node node = root;
        
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch)){
                node = node.get(ch);
            }else{
                return 0;
            }
        }
        return node.getPrefixCount();
    }

    public void erase(String word) {
        Node node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch)){
                node = node.get(ch);
                node.decreasePrefixCount();
            }else{
                return;
            }
        }
        node.decreaseEndCount();
    }

}

// this is also another raw to do it
import java.util.* ;
import java.io.*; 

public class Trie {

    public static TreeNode root;

    public static class TreeNode {
        public TreeNode children[];
        public int prefixCount;
        public int endCount;

        public TreeNode() {
            children = new TreeNode[26];
            prefixCount = 0;
            endCount = 0;
        }
    }

    public Trie() {
        root = new TreeNode();
    }

    
    public void insert(String word) {
        TreeNode node = root;
        for (char ch : word.toCharArray()) {
            int ind = ch - 'a';
            if (node.children[ind] == null) {
                node.children[ind] = new TreeNode();
                //not present then add a new node
            }
            node = node.children[ind];
            node.prefixCount++; 
            //here above you need to increment count to added node not the current Node
        }
        node.endCount++; 
    }

    
    public int countWordsEqualTo(String word) {
        TreeNode node = root;
        for (char ch : word.toCharArray()) {
            int ind = ch - 'a';
            if (node.children[ind] == null) {
                return 0;
            }
            node = node.children[ind];
        }
        return node.endCount;
    }

    
    public int countWordsStartingWith(String prefix) {
        TreeNode node = root;
        for (char ch : prefix.toCharArray()) {
            int ind = ch - 'a';
            if (node.children[ind] == null) {
                return 0;
            }
            node = node.children[ind];
        }
        return node.prefixCount;
    }
    // here don't put null on past node, as there multiple other source/reference store in one of 25 spaces
    // while deleting make sure prefix count reduct from after getting the next node reference not the current one, 
    public void erase(String word) {
        TreeNode node = root;
        for (char ch : word.toCharArray()) {
            int ind = ch - 'a';
            if (node.children[ind] == null) return; 
            node = node.children[ind];
            node.prefixCount--; 
        }
        node.endCount--; 
    }
}
