problem link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/submissions/
code :
memoization : 
class Solution {
    public int maxProfit(int[] prices) {
        
        //so there are multiple transaction are allowed so, we can buy ans sell any time, 
        
        //so we have all possibilities in front of use
        //1) I have to buy it today and move forward
        //2) I don't have to buy today, I will buy in future
        //3) I have to sell today
        //4) I dont want to sell today, I will sell next day
        
        //let make the notation for
        //if 0 -> then I have to buy
        //if 1 -> then I have to sell
        int n = prices.length;
        
        int dp[][] = new int[n][2];
        for(int row[] : dp) Arrays.fill(row, -1);
        return getMaxProfit(0, 0, prices, dp);
    }
    
    public int getMaxProfit(int ind, int status, int prices[], int dp[][]){
        
        //base case
        if(ind == prices.length){
            return 0;
        }
        
        if(dp[ind][status] != -1) return dp[ind][status];
        
        int profit = 0;
        
        //status for buying
        if(status == 0){
            
           int notBuy = 0 + getMaxProfit(ind+1, 0, prices, dp);
           int buy = -prices[ind] + getMaxProfit(ind+1, 1, prices, dp);
           profit = Math.max(notBuy, buy);
        }else{
            
            int notSelling = 0 + getMaxProfit(ind+1, 1, prices, dp);
            int sell = prices[ind] + getMaxProfit(ind+1, 0, prices, dp);
            profit += Math.max(notSelling, sell);
        }
        return dp[ind][status] = profit;   
    }   
}

Tabulation: 
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        
        //as we dont have the index for the base case if(ind == n) so we add one index 
        int dp[][] = new int[n+1][2];
        
        dp[n][0] = 0;
        dp[n][1] = 0;
        
        for(int ind = n-1; ind >= 0; ind--){
            for(int status = 0; status < 2; status++){
                int profit = 0;
                if(status == 0){  
                       int notBuy = 0 + dp[ind+1][0];
                       int buy = -prices[ind] + dp[ind+1][1];
                       profit = Math.max(notBuy, buy);
                }else{
                        int notSelling = 0 + dp[ind+1][1];
                        int sell = prices[ind] + dp[ind+1][0];
                        profit += Math.max(notSelling, sell);
                  
                }

                dp[ind][status] = profit;
           
            }
           
        }
         return dp[0][0];
    }

}