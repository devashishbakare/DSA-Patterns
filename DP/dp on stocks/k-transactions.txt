problem link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/submissions/
Its same as the 2 transaction allowed
code 
 public int maxProfit(int cap, int[] prices) {
         int n = prices.length;
        
        int dp[][][] = new int[n+1][2][cap+1];
        
       
        for(int ind = n-1; ind >= 0; ind--){
            for(int status = 0; status < 2; status++){
                for(int capasity = 1; capasity <= cap; capasity++){
                     
                    int profit = 0;
        
                    //status for buying
                    if(status == 0){

                       int notBuy = 0 + dp[ind+1][0][capasity];
                       int buy = -prices[ind] + dp[ind+1][1][capasity];
                       profit = Math.max(notBuy, buy);

                    }else{

                        int notSelling = 0 + dp[ind+1][1][capasity];
                        int sell = prices[ind] + dp[ind+1][0][capasity-1];
                        profit += Math.max(notSelling, sell);
                    }
                   dp[ind][status][capasity] = profit;   
                }
            }
            
        }
        return dp[0][0][cap];
    }   
