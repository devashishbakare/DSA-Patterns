Link : https://leetcode.com/problems/stone-game-ii/description/

Code :

class Solution {
    public int stoneGameII(int[] piles) {
    int[] preSum = new int[piles.length + 1];
    for (int i = 0; i < piles.length; i++) {
        preSum[i + 1] = preSum[i] + piles[i];
    }
    return stoneGameIIHelper(piles, preSum, 0, 1, new int[piles.length][piles.length + 1]);
}

private int stoneGameIIHelper(int[] piles, int[] preSum, int start, int M, int[][] memo) {
    if (start == piles.length) {
        return 0;
    }
    if (memo[start][M] > 0) {
        return memo[start][M];
    }
    int max = 0;
    for (int i = 1; i <= 2 * M && start + i <= piles.length; i++) {
        int remainingStone = preSum[piles.length] - preSum[start];
        int opponentPick = stoneGameIIHelper(piles, preSum, start + i, Math.max(M, i), memo);
        int nextMax =  remainingStone - opponentPick;
        max = Math.max(max, nextMax);
    }
    memo[start][M] = max;
    return max;
}

}

//another very intuavite code:

class Solution {
    public int stoneGameII(int[] piles) {
        int n = piles.length;
        int[] prefixSum = new int[n + 1];
        int[][] memo = new int[n][n + 1];

        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + piles[i];
        }
        return dfs(piles, prefixSum, 0, 1, memo);
    }

    private int dfs(int[] piles, int[] prefixSum, int ind, int M, int[][] memo) {
        if (ind == piles.length) {
            return 0;
        }
        if (2 * M >= piles.length - ind) {
            return prefixSum[piles.length] - prefixSum[ind];
        }
        if (memo[i][M] != 0) {
            return memo[i][M];
        }
        int maxStones = 0;
        for (int x = 1; x <= 2 * M; x++) {
            int stonesTaken = prefixSum[ind + x] - prefixSum[ind];
            int opponentStones = dfs(piles, prefixSum, ind + x, Math.max(M, x), memo);
            int aliceStones = stonesTaken + (prefixSum[piles.length] - prefixSum[i + x]) - opponentStones;
            maxStones = Math.max(maxStones, aliceStones);
        }
        memo[i][M] = maxStones;
        return maxStones;
    }
}