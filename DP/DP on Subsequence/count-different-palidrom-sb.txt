problem link : https://leetcode.com/problems/count-different-palindromic-subsequences/

Note : we are returning dp[0][n-1]; which is first to last index of string
Recursive solution

class Solution {
     public int countPalindromicSubsequences(String S) {
        return count(0,S.length()-1,S);  
    }
    private int count(int i, int j, String s) {
        if(i>j) return 0;
        if(i==j) return 1;
        int num=0;
        if(s.charAt(i)==s.charAt(j)) {
            //a....a add two ends to every inner palindorm, there are duplicates in case of a...a...a...a
            num=2*count(i+1,j-1,s); 
            
            //we need to check inside this range, is there any palindromic subsequnce or not
            int left=i+1, right=j-1; 
            while(left<=right&&s.charAt(left)!=s.charAt(i)) left++;
            while(left<=right&&s.charAt(right)!=s.charAt(i)) right--;
            //a...a...a...a
            //if left not crosees right then, the range is not pallindrom, so remove the count that we added above
            if(left<right) num-=count(left+1,right-1,s);
            //a...a...a, add aa
            else if(left==right) num+=1; 
            //if croseed then 2 subsequence are always there a, and aa(due to subseqenuce)
            else num+=2; //a...a, add a, aa
        } //else try for the union-intersection part of it
        else num=count(i+1,j,s)+count(i,j-1,s)-count(i+1,j-1,s);
        return num;
    }
}

Memoization
public int countPalindromicSubsequences(String S) {
        int n=S.length();
        int[][] mem=new int[n][n];
        return count(0,n-1,S,mem);  
    }
    private int count(int i, int j, String s, int[][] mem) {
        if(i>j) return 0;
        if(i==j) return 1;
        if(mem[i][j]!=0) return mem[i][j];
        int num=0;
        if(s.charAt(i)==s.charAt(j)) {
            num=2*count(i+1,j-1,s,mem); //a....a add two ends to every inner palindorm, there are duplicates if ... has a...a
            //need to figure out how to count the two ends and avoid duplicates
            int left=i+1, right=j-1;
            while(left<=right&&s.charAt(left)!=s.charAt(i)) left++;
            while(left<=right&&s.charAt(right)!=s.charAt(i)) right--;
            //a...a...a...a
            if(left<right) num-=count(left+1,right-1,s,mem); //no need to add two ends to the palindomes between inner 2a
            else if(left==right) num+=1; //a...a...a, add aa
            else num+=2; //a...a, add a, aa
        } else num=count(i+1,j,s,mem)+count(i,j-1,s,mem)-count(i+1,j-1,s,mem);
        return mem[i][j]=num<0?num+1000000007:num%1000000007;
    }


Tabulation:

class Solution {
     public int countPalindromicSubsequences(String S) {
        int mod = 1000000007;
        int n=S.length();
        int[][] dp=new int[n][n];
         
        for(int i = n-1 ;i>=0;i--) {
            dp[i][i]=1; //for single character
            for(int j=i+1;j<n;j++) {
                if(S.charAt(i)==S.charAt(j)) {
                    
                    int left= i+1, right= j-1;
                    dp[i][j]= 2 * dp[i+1][j-1];
                    
                    while(left<=right&&S.charAt(left)!=S.charAt(i)) left++;
                    while(left<=right&&S.charAt(right)!=S.charAt(i)) right--;
                    
                    if(left<right) dp[i][j]-=dp[left+1][right-1]; 
                    else if(left==right) dp[i][j]+=1; 
                    else dp[i][j]+=2; 
                    
                } else{
                  dp[i][j]=dp[i+1][j]+dp[i][j-1]-dp[i+1][j-1];  
                } 
                dp[i][j]=dp[i][j]<0?dp[i][j]+mod:dp[i][j]%mod;
            }                
        }
        return dp[0][n-1];         
    }
}