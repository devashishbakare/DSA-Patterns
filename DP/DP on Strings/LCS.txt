problem link: https://leetcode.com/problems/longest-common-subsequence/
code : 
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
     
        int n = text1.length();
        int m = text2.length();
        int dp[][] = new int[n][m];
        for(int row[] : dp) Arrays.fill(row, -1);
        return lcs(n-1, m-1, text1, text2, dp);
        
    }
    public int lcs(int ind1, int ind2, String text1, String text2, int dp[][]){
        
        //base case will be
        if(ind1 < 0 || ind2 < 0 ) return 0;
        
        //before making any calls, lets check whether we computed this before or not
        if(dp[ind1][ind2] != -1) return dp[ind1][ind2];
        
        //how can we make the calls
    
        if(text1.charAt(ind1) == text2.charAt(ind2)){
            return dp[ind1][ind2] = 1 + lcs(ind1-1, ind2-1, text1, text2, dp);
        }else{
            int shiftind1 = lcs(ind1-1, ind2, text1, text2, dp);
            int shiftind2 = lcs(ind1, ind2-1, text1, text2, dp);
            return dp[ind1][ind2] = Math.max(shiftind1, shiftind2);
        }
        
        
    }
    
}
