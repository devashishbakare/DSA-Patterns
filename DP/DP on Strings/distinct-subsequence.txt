problem link : https://leetcode.com/problems/distinct-subsequences/

code :

class Solution {
    public int numDistinct(String s, String t) {
     
        // now we have two strings ans we have to check whether, how many times present?
        
        //we have to explore all the possible combiantion of the s and then we can compair then we can say okay this one.
        
        //when ever their is something exploring all the possible ways, I generaly think in recursion 
        
        //so how to compair the strings
        
        //first thing is that we need to compair like
        
        int n = s.length();
        int m = t.length();
        
        int dp[][]=new int[n][m];
        for(int rows[]: dp)
        Arrays.fill(rows,-1);
        return countUtil(t,s,n-1,m-1,dp);
    }
    public int countUtil(String s1, String s2, int ind1, int ind2,int[][] dp){
        if(ind2<0)
            return 1;
        if(ind1<0)
            return 0;
        
        if(dp[ind1][ind2]!=-1)
            return dp[ind1][ind2];
        
        if(s1.charAt(ind1)==s2.charAt(ind2)){
            int leaveOne = countUtil(s1,s2,ind1-1,ind2-1,dp);
            int stay = countUtil(s1,s2,ind1-1,ind2,dp);
            
            return dp[ind1][ind2] = (leaveOne + stay)%prime;
        }
        
        else{
            return dp[ind1][ind2] = countUtil(s1,s2,ind1-1,ind2,dp);
        }
    }

    
}