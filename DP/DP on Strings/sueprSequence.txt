problem link : https://leetcode.com/problems/shortest-common-supersequence/
code : 
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        
        int n = str1.length();
        int m = str2.length();
        
        int dp[][] = new int[n+1][m+1];
        
        for(int ind1 = 1; ind1 <= n ; ind1++){
            for(int ind2 = 1; ind2 <= m; ind2++){
                
                if(str1.charAt(ind1-1) == str2.charAt(ind2-1)){
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                }else{
                    dp[ind1][ind2] = Math.max(dp[ind1-1][ind2], dp[ind1][ind2-1]);
                }
            }
        }
        
        StringBuilder sb = new StringBuilder();
        
        int ind1 = n;
        int ind2 = m;
      //as dp filled the according to shifting of the index so while adding the character you need to use ind-1   
        while(ind1 > 0 && ind2 > 0){
            
            if(str1.charAt(ind1-1) == str2.charAt(ind2-1)){
                sb.append(str1.charAt(ind1-1));
                ind1--;
                ind2--;
            }else if(dp[ind1-1][ind2] > dp[ind1][ind2-1]){
                sb.append(str1.charAt(ind1-1));
                ind1--;
            }else{
                sb.append(str2.charAt(ind2-1));
                ind2--;
            }
            
        }
        
        while(ind1 > 0){
            sb.append(str1.charAt(ind1-1));
            ind1--;
        }
        while(ind2 > 0){
            sb.append(str2.charAt(ind2-1));
            ind2--;
        }
        
        return sb.reverse().toString();
    }
}