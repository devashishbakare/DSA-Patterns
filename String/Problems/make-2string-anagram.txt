problem link : https://leetcode.com/contest/weekly-contest-282/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/

Note : this solution works only when there is lower case are there

class Solution {
int minSteps(string s, string t) {
    int freq[267 = {0};
    for (char it : s.toCharArray()) freq[it - 'a']++; 
    for(char it: t.toCharArray()) freq[it - 'a']--;
    int cnt = 0;
    for(int i = 0;i<26;i++) 
        cnt += Math.abs(freq[i]);
    return cnt;
};

Note : here we have use the map, in case there is lowecase and uppercase letter are both present
class Solution {
    public int minSteps(String s, String t) {
       
        HashMap<Character, Integer> sMap = new HashMap<>();
        HashMap<Character, Integer> tMap = new HashMap<>();
        
        int slen = s.length();
        for(int i = 0; i < slen; i++){
            char ch = s.charAt(i);
            sMap.put(ch, sMap.getOrDefault(ch, 0)+1);
        }
         int tlen = t.length();
        for(int i = 0; i < tlen; i++){
            char ch = t.charAt(i);
            tMap.put(ch, tMap.getOrDefault(ch, 0)+1);
        }
        int step = 0;
        
        for(char key : tMap.keySet()){
            int val = tMap.get(key);
            if(sMap.containsKey(key)==false) step += val;
            if(sMap.containsKey(key)){
                step += Math.abs(val-sMap.get(key));
            }
            
        }
        
        for(char key : sMap.keySet()){
            int val = sMap.get(key);
            if(tMap.containsKey(key)==false) step += val;
        }
        return step;
        
    }
}