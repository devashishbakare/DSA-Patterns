problem link : https://leetcode.com/problems/frequency-of-the-most-frequent-element/description/

why we need to use the sliding window here
where ever there k is give and we have to add/make widow/get output after adding the k
then we tend to think i direction of sliding window
Note : sum + k < (long)nums[j] * (j-i+1) this case
sum + k = we have to make in array get the frequency count
you know the window -> j - i + i
loop start with j first-
code :
 public int maxFrequency(int[] nums, int k) {
    
        int i = 0;
        long sum = 0;
        int ans = 1;
        Arrays.sort(nums);
        for(int j = 0; j < nums.length; j++){
            sum += nums[j];
            while(sum + k < (long)nums[j] * (j-i+1)){
                sum -= nums[i];
                i++;
            }
            ans = Math.max(ans, (j-i+1));
            
        }
        return ans;
    }