problem : https://practice.geeksforgeeks.org/problems/stock-span-problem-1587115621/1

Naive approtch
//get the count until not found the previous greater element
 public int largestRectangleArea(int[] arr) {
       
       int res = 0;
       int n = arr.length;
       for( int i = 0; i < n; i++){
           
           int curr = arr[i];
           
           for(int j = i-1; j >= 0; j--){
               if(arr[j] >= arr[i]) curr += arr[i];
               else break;
           }
           
           for(int j = i+1; j < n; j++){
               if(arr[j] >= arr[i]) curr += arr[i];
               else break;
           }
           res = Math.max(res, curr);
       }
        
        return res;
}

// efficient solution 

//keeping only track of previous greater element index which is greter than the current element
ie : (current index - previous greater element index)
// if stack get empty then return element itself a greatest of all so return index+1;
public static int[] calculateSpan(int price[], int n)
    {
        Stack<Integer> stack = new Stack();
        int span[] = new int[n];
        span[0] = 1;
        
        stack.push(0);
        
        for(int i = 0; i < n; i++){
            
            while(stack.size() > 0 && price[stack.peek()] <= price[i]) 
            {
             stack.pop();   
            }
            if(stack.size() > 0) span[i] = i - stack.peek();
            else span[i] = i +1;
            
            stack.push(i);
        }
        return span;
}