link : https://leetcode.com/problems/sum-of-subarray-minimums/submissions/1151337568/?envType=daily-question&envId=2024-01-20

Note : here we are calculating a length from prevsmall index to curr
       Length is important 
code : 

class Solution {
    public int sumSubarrayMins(int[] arr) {
        
        Stack<int[]> pl = new Stack();
        Stack<int[]> nl = new Stack();
        
        int n = arr.length;
        
        int right[] = new int[arr.length];
        int left[] = new int[arr.length];

        for(int i = 0; i < n; i++) right[i] = n-i;

        for(int i = 0; i < arr.length; i++){
            while(pl.size() > 0 && pl.peek()[0] > arr[i]){
                pl.pop();
            }
            left[i] = (pl.size() > 0 ? i-pl.peek()[1] : i+1);
            pl.push(new int[]{arr[i], i});
        }

        for(int i = 0; i < n; i++){
            while(nl.size() > 0 && arr[i] < nl.peek()[0]){
                int x[] = nl.pop();
                right[x[1]] = i-x[1];
            }
            nl.push(new int[]{arr[i], i});
        }
      
     
        int ans = 0;
        int mod = (int)1e9+7;
        for(int i = 0; i < n; i++){
            ans = (int) ((ans + (long) arr[i] * left[i] * right[i]) % mod);
        }
        return ans;   
    }
}