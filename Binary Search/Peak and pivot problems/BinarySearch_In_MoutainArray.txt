problem : https://leetcode.com/problems/find-in-mountain-array/submissions/

Read article to get better understanding 
https://www.geeksforgeeks.org/search-for-an-element-in-a-mountain-array/

if array in arr in asending order our binary seach templet work
if array in descending order we have to change the out template 
more read about this : https://www.geeksforgeeks.org/order-agnostic-binary-search/

Note :
find the index, then always use while (left < right)
need to return the index during the search,use while (left <= right)

 public int findInMountainArray(int target, MountainArray arr) {
        
        //we need to find out the pivot : peek of mountain
        //if that the target then return target 
        //if not then search for left part 
        //if not found in peak and not in left then find in right part
        //and return the ans
       
        //finding peek element 
        
        int low = 0;
        int n = arr.length();
        int high = arr.length()-1;
        int peek = -1;
        
        while(low < high){
            
            int mid = low + (high - low)/2;
            
            if(arr.get(mid) < arr.get(mid+1)){
                low = mid+1;
                peek = low;
            }
            else high = mid;           
        }
        
        // cheking in left direction first if coz we need smallest index if there is many
        low = 0;
        high = peek;
        
        while( low <= high){
            
            int mid = low + (high - low)/2;
            
            if(arr.get(mid) < target){
                low = mid+1;
            }
            else if(arr.get(mid) > target) {
                high = mid-1;
            }
            else{
                return mid;
            }
            
        }
        
        //checking in right direction now
        low = peek;
        high = n-1;
        
        while( low <= high){
            
            int mid = low + (high - low)/2;
            
            if(arr.get(mid) > target) {
                low = mid+1;
            }
            else if(arr.get(mid) < target){
                high = mid-1;
            }
            else{
                return mid;
            }
            
        }
        
        return -1;
   }
}