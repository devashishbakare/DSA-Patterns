problem :  https://leetcode.com/problems/search-in-rotated-sorted-array/submissions/

Article to read about this : https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/
class Solution {
    public int search(int[] arr, int target) {
     
        if(arr.length == 1) if(arr[0] == target) return 0;
        else return -1;
        if(arr.length == 2){
            if(arr[0] == target) return 0;
            if(arr[1] == target) return 1;
            
            return -1;
        }
        int pivot = findPivot(arr, target);
        if(arr[pivot] == target) return pivot;
        int ans = binarySearch(arr, 0, pivot-1, target);
        if(ans != -1) return ans;
        int ans1 = binarySearch(arr, pivot+1, arr.length-1, target);
        if(ans1 != -1) return ans1;
        
        return -1;
        
    }
    public int findPivot(int arr[],int target){
        int low =0;
        int high = arr.length-1;
        int pivot = 0;

        while(low < high){
            
            int mid = low + (high -low)/2;
            
            if(mid > 0 && arr[mid-1] > arr[mid]){  
                return mid-1;
                                                 
            }
            else if(mid+1 < arr.length && arr[mid] > arr[mid+1]){
                return mid;
            }
            else if(arr[low] <= arr[mid] ){
                low = mid + 1;
            }else{
                high = mid;
            } 
        
        }
        return low;
    }
    
    public int binarySearch(int arr[],int low, int high , int x){
        
        while(low <= high){
            int mid = low + (high- low)/2;
            
            if(arr[mid] == x) return mid;
            else if(arr[mid] > x) high = mid-1;
            else low = mid + 1;
        }
        
        return -1;
        
    }
    
}