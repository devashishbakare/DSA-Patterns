problem : https://leetcode.com/problems/find-peak-element/submissions/
good read : https://leetcode.com/problems/find-peak-element/discuss/1290642/intuition-behind-conditions-complete-explanation-diagram-binary-search

public int findPeakElement(int[] nums) {

        // if there is single element 
     	if(nums.length == 1) return 0; // single element
        
        int n = nums.length;
        
		// if first element is greater and second is smaller then there is one of the peek
        if(nums[0] > nums[1]) return 0;
        // same with the last
        if(nums[n-1] > nums[n-2]) return n-1;
		
		// we have to avoid mid-1 >= 0 and mid+1 < n condtion hence we are trimming the search space
        int start = 1;
        int end = n-2;
        
        // if we are incresing curve the we know for sure discard left part and move to right 
            if(nums[mid] < nums[mid+1]) low = mid+1;
        // if we are in decreasing curve the we discard right part and go to left 
            if(nums[mid] > nums[mid-1]) high = mid-1;
        
        
        while(start <= end) {
            int mid = start + (end - start)/2;
            if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]) return mid;
            else if(nums[mid] < nums[mid-1]) end = mid - 1;
            else if(nums[mid] < nums[mid+1]) start = mid + 1;
        }
        return -1; // dummy return statement
    }