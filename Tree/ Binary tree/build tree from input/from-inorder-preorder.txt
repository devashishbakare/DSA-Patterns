problem link : https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

Note : undestand the preorder, inorder and postorder how them form, then everything is just simple logic
code :

class Solution {
    public int index = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = inorder.length;
        
        //why we need the hashmap, coz from preorder we get the root, and in inorder array we are getting the left and right side so, to found the value in inorder(root) we have to travers each time or we can use hasmap to get it into O(1) time
        for(int i = 0; i < n; i++){
            map.put(inorder[i], i);    
        }
        
        return getRootNode(0, n-1, inorder, preorder, map);
    }
    
    public TreeNode getRootNode(int start, int end, int in[], int pre[], HashMap<Integer, Integer> map){
        
        //if start > end then it means that there is no element in left and right
        if(start > end) return null;
        int nodeVal = pre[index++];
        
        TreeNode root = new TreeNode(nodeVal);
        
        int index = map.get(nodeVal);
        
        
        root.left = getRootNode(start, index-1, in, pre, map);
        root.right = getRootNode(index+1, end, in, pre, map);
        
        return root;
        
    }
}